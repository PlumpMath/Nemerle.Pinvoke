using Nemerle;
using Nemerle.Collections;
//using Nemerle.ComputationExpressions;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Peg;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Pinvoke.CParser.Ast.Constants;
using Nemerle.Pinvoke.CParser.Ast.Declarations;
using Nemerle.Pinvoke.CParser.Ast.Declarations.DeclarationSpecifiers;
using Nemerle.Pinvoke.CParser.Ast.Declarations.Declarator;
using Nemerle.Pinvoke.CParser.Ast.ExternalDefinitions;
using Nemerle.Pinvoke.CParser.Ast.Expressions;
using Nemerle.Pinvoke.CParser.Ast.Identifiers;

namespace Nemerle.Pinvoke.CParser
{
  type Expression = list[AssignmentExpression];

  [PegGrammar(Options = EmitDebugSources, translationUnit,
  grammar
  {
      any                 = ['\u0000'..'\uFFFF'];
      
      #region Line terminators

      newLineCharacter = '\n'
                        / '\r'
                        / '\u2028'    /*  line separator       */
                        / '\u2029';   /*  paragraph separator  */
      newLine   = "\r\n" / newLineCharacter;

      #endregion

      #region White space

      whitespace = [Zs]
                / '\t'
                / '\v'        /*  vertial tab          */
                / '\f';       /*  form feed            */

      #endregion

      #region Spacer

      space = whitespace / newLine;
      
      [InlineAllSubrules]
      s : void = space*;                      /* optional spacer          */
      S : void = !identifierBody s;           /* identifier break spacer  */
      
      #endregion
      
      #region A.1.2 Keywords
      
      keyword = ("auto"           / "break"         / "case"      /
                 "char"           / "const"         / "continue"  /
                 "default"        / "do"            / "double"    /
                 "else"           / "enum"          / "extern"    /
                 "float"          / "for"           / "goto"      /
                 "if"             / "inline"        / "int"       /
                 "long"           / "register"      / "restrict"  /
                 "return"         / "short"         / "signed"    /
                 "sizeof"         / "static"        / "struct"    /
                 "switch"         / "typedef"       / "union"     /
                 "unsigned"       / "void"          / "volatile"  /
                 "while"          / "_Alignas"      / "_Alignof"  /
                 "_Atomic"        / "_Bool"         / "_Complex"  /
                 "_Generic"       / "_Imaginary"    / "_Noreturn" /
                 "_Static_assert" / "_Thread_local" ) !identifierBody;
                 
      #endregion
      
      #region A.1.3 Identifiers
      
      digit            = ['0'..'9'];
      nonDigit		   = ['a'..'z', 'A'..'Z'] / '_' / universalCharacterName;
      identifierBody   = nonDigit (nonDigit / digit)*;
      identifier : Identifier = !keyword identifierBody s;
      
      #endregion
      
      #region A.1.4 Universal character names
      
      hexQuad                = hexadecimalDigit hexadecimalDigit hexadecimalDigit hexadecimalDigit;
      universalCharacterName = "\\u" hexQuad / "\\U" hexQuad hexQuad;
      
      #endregion

      #region A.1.5 Constants
      
      constant : Constant   
                      = integerConstant     /
                        floatingConstant    /
                        enumerationConstant /
                        characterConstant;
                        
      integerConstant : Constant = 
                        decimalConstant integerSuffix? /
                        octalConstant integerSuffix?   /
                        hexadecimalConstant integerSuffix?;
                        
      decimalConstant : Constant = nonzeroDigit digit*;
                        
      octalConstant   : Constant = '0' octalDigit+;
                        
      hexadecimalConstant : Constant = hexadecimalPrefix hexadecimalDigit+;
      
      hexadecimalPrefix   = "0x" / "0X";
      
      nonzeroDigit          = ['1'..'9'];
      
      octalDigit            = ['0'..'7'];
      
      hexadecimalDigit      = ['0'..'9', 'A'..'F', 'a'..'f'];
      
      integerSuffix = unsignedSuffix longSuffix?     /
                      unsignedSuffix longLongSuffix  /
                      longSuffix     unsignedSuffix? /
                      longLongSuffix unsignedSuffix?;
                      
      unsignedSuffix = 'u' / 'U';
      
      longSuffix     = 'l' / 'L';
      
      longLongSuffix = "ll" / "LL";
      
      floatingConstant : Constant =
                                decimalFloatingConstant /
                                hexadecimalFloatingConstant;
                         
      decimalFloatingConstant : Constant  = fractionalConstant exponentPart? floatingSuffix?
                                            digitSequence exponentPart floatingSuffix?;
                                
      hexadecimalFloatingConstant : Constant  = 
                                    hexadecimalPrefix hexadecimalFractionalConstant binaryExponentPart floatingSuffix? /
                                    hexadecimalPrefix hexadecimalDigitSequence binaryExponentPart floatingSuffix?;
                                    
      fractionalConstant         = digitSequence? '.' digitSequence / 
                                   digitSequence '.';
                                   
      exponentPart               = 'e' sign? digitSequence /
                                   'E' sign? digitSequence;
                                   
      sign                       = '+' / 
                                   '-';
                                   
      digitSequence              =  digit+;
      
      hexadecimalFractionalConstant = hexadecimalDigitSequence? '.' hexadecimalDigitSequence /
                                      hexadecimalDigitSequence '.';
                                      
      binaryExponentPart = 'p' sign? digitSequence /
                           'P' sign? digitSequence;
                           
      hexadecimalDigitSequence = hexadecimalDigit+;
      
      floatingSuffix = 'f' / 'l' / 'F' / 'L';
      
      enumerationConstant : Constant = identifier;
      
      characterConstant : Constant = 
                               "'" cCharSequence "'"  /
                              "L'" cCharSequence "'" /
                              "u'" cCharSequence "'" /
                              "U'" cCharSequence "'";
         
                              
      cCharSequence = cChar+;
      
      cChar = !(newLineCharacter / '\'' / '\\') any / escapeSequence;
      
      escapeSequence        = simpleEscapeSequence      /
                              octalEscapeSequence       /
                              hexadecimalEscapeSequence /
                              universalCharacterName;
                              
      simpleEscapeSequence = '\\' ('\'' / '"' / '?' / '\\' / 'a' / 'b' / 'f' / 'n' / 'r' / 't' / 'v');
      
      octalEscapeSequence       = '\\' octalDigit octalDigit? octalDigit?;
      
      hexadecimalEscapeSequence = "\\x" hexadecimalDigit+;
      
      #endregion
      
      #region A.1.6 String literals
      
      stringLiteral = encodingPrefix? '"' sCharSequence '"';
      
      encodingPrefix = "u8" /
                       "u"  /
                       "U"  /
                       "L";
      
      sCharSequence = sChar*;
      
      sChar = !(newLineCharacter / '"' / '\\') any / escapeSequence / universalCharacterName;
      
      #endregion
      
      #region A.2.1 Expressions
      
      primaryExpression : PrimaryExpression = 
                          primaryExpressionIdentifier       /
                          primaryExpressionConstant         /
                          primaryExpressionStringLiteral    /
                          primaryExpressionExpression       /
                          primaryExpressionGenericSelection;

      primaryExpressionIdentifier       : PrimaryExpression = identifier;          
      primaryExpressionConstant         : PrimaryExpression = constant;            
      primaryExpressionStringLiteral    : PrimaryExpression = stringLiteral;       
      primaryExpressionExpression       : PrimaryExpression = '('s expression ')'s;
      primaryExpressionGenericSelection : PrimaryExpression = genericSelection;
                          
      genericSelection = "_Generic"s '('s assignmentExpression ','s genericAssocList ')'s;
      
      genericAssocList = genericAssociation (','s genericAssociation)*;
      
      genericAssociation = typeName ':'s assignmentExpression /
                           "default"s ':'s assignmentExpression;
      
      postfixExpressionTail = '['s expression ']'s  /
                              '(' argumentExpressionList? ')'/
                              '.'s identifier        /
                              "->"s identifier       /
                              "++"                    /
                              "--"; 

      postfixExpression                      : PostfixExpression =  postfixExpressionHead postfixExpressionTail*;
      postfixExpressionHead                  : PostfixExpressionHead = primaryExpressionPostfixExpressionHead / typeInitializerPostfixExpressionHead;
      primaryExpressionPostfixExpressionHead : PostfixExpressionHead = primaryExpression;
      typeInitializerPostfixExpressionHead   : PostfixExpressionHead = '('s typeName ')'s '{'s initializerList (','s)? '}'s;

                         
      argumentExpressionList = assignmentExpression (','s assignmentExpression)*;
      
      unaryExpression : UnaryExpression =   
                                           postfixUnaryExpression             / 
                                           incrementUnaryExpression           /
                                           decrementUnaryExpression           /
                                           unaryOperatorCastUnaryExpression   /
                                           sizeofUnaryExpression              /
                                           sizeofTypenameUnaryExpression      /
                                           alignOfTypenameUnaryExpression;


      postfixUnaryExpression            : UnaryExpression =     postfixExpression;
      incrementUnaryExpression          : UnaryExpression =     "++"s unaryExpression;
      decrementUnaryExpression          : UnaryExpression =     "--"s unaryExpression;
      unaryOperatorCastUnaryExpression  : UnaryExpression =     unaryOperator castExpression;
      sizeofUnaryExpression             : UnaryExpression =     "sizeof"s unaryExpression;
      sizeofTypenameUnaryExpression     : UnaryExpression =     "sizeof"s '('s typeName ')'s;
      alignOfTypenameUnaryExpression    : UnaryExpression =     "_Alignof"s '('s typeName ')'s;

                        
      unaryOperator = '&' / '*' / '+' / '-' / '~' / '!';
      
      castExpression                    : CastExpression            = unaryExpressionCastExpression /
                                                                      typedCastExpression;

      unaryExpressionCastExpression     : CastExpression            = unaryExpression;
      typedCastExpression               : CastExpression            = '('s typeName ')'s castExpression;

      
      multiplicativeExpressionTail = '*'s castExpression /
                                     '/'s castExpression /
                                     '%'s castExpression;
      
      multiplicativeExpression          : MultiplicativeExpression  = castExpression multiplicativeExpressionTail*;
      
      additiveExpressionTail       = '+'s multiplicativeExpression /
                                     '-'s multiplicativeExpression;
      additiveExpression                : AdditiveExpression        = multiplicativeExpression additiveExpressionTail*;
      
      shiftExpressionTail          = "<<"s additiveExpression /
                                     ">>"s additiveExpression;
      shiftExpression                   : ShiftExpression           = additiveExpression shiftExpressionTail*;
      
      relationalExpressionTail     = '<'s shiftExpression  /
                                     '>'s shiftExpression  /
                                     "<="s shiftExpression /
                                     ">="s shiftExpression;
      
      relationalExpression              : RelationalExpression      = shiftExpression relationalExpressionTail*;
      
      equalityExpressionTail      = "=="s relationalExpression /
                                    "!="s relationalExpression;

      equalityExpression                : EqualityExpression        = relationalExpression equalityExpressionTail*;
      
      andExpression                     : AndExpression             = equalityExpression ('&'s equalityExpression)*;
      
      exclusiveOrExpression             : ExclusiveOrExpression     = andExpression ('^'s andExpression)*;
      
      inclusiveOrExpression             : InclusiveOrExpression     = exclusiveOrExpression ('|'s exclusiveOrExpression)*;
      
      logicalAndExpression              : LogicalAndExpression      = inclusiveOrExpression ("&&"s inclusiveOrExpression)*;

      logicalOrExpression               : LogicalOrExpression       = logicalAndExpression ("||"s logicalAndExpression)*;
      
      conditionalExpression             : ConditionalExpression     = logicalOrExpression ('?'s expression ':'s conditionalExpression)?;
      
      assignmentExpression              : AssignmentExpression      = conditionalAssignmentExpression /
                                                                      operatorAssignmentExpression;

      conditionalAssignmentExpression   : AssignmentExpression      = conditionalExpression;
      operatorAssignmentExpression      : AssignmentExpression      = unaryExpression assignmentOperator assignmentExpression;

      assignmentOperator = "=" / "*=" / "/=" / "%=" / "+=" / "-=" / "<<=" / ">>=" / "&=" / "^=" / "|=";
      
      expression : Expression   = assignmentExpression (','s assignmentExpression)*;
      
      constantExpression : ConstantExpression = conditionalExpression;
            
      #endregion
      
      #region A.2.2 Declarations

      normalDeclaration : Declaration = declarationSpecifiers initDeclaratorList? ';'s;
      
      declaration : Declaration =   normalDeclaration  /
                                    staticAssertDeclaration;
      
      declarationSpecifiers : list[DeclarationSpecifier]  =   
                                            DeclarationSpecifierList 
                                            {
                                                ( 
                                                    DeclarationSpecifier 
                                                    {
                                                        storageClassSpecifier                /
                                                        typeDeclarationSpecifier             /
                                                        typeQualifeierDeclarationSpecifier   /
                                                        functionDeclarationSpecifier         /
                                                        alignmentDeclarationSpecifier 
                                                    } 
                                                )+
                                            };
                              
      initDeclaratorList : list[InitDeclarator]   = initDeclarator (','s initDeclarator)*;
      
      normalInitDeclarator : InitDeclarator = declarator;
      initDeclaratorWithInitializer : InitDeclarator= declarator '='s initializer;
      
      initDeclarator : InitDeclarator         = initDeclaratorWithInitializer / 
                                                normalInitDeclarator;
                              
      storageClassSpecifier : DeclarationSpecifier = 
                                                ("typedef"       /
                                                 "extern"        /
                                                 "static"        /
                                                 "_Thread_local" /
                                                 "auto"          /
                                                 "register")S;
      
      builtInTypeSpecifier : TypeSpecifier  = 
                                                (
                                                "void"           / 
                                                "char"           / 
                                                "short"          / 
                                                "int"            / 
                                                "long"           /
                                                "float"          /
                                                "double"         /
                                                "signed"         /
                                                "unsigned"       /
                                                "_Bool"          /
                                                "_Complex")S;
      
      structOrUnionTypeSpecifier : TypeSpecifier = structOrUnionSpecifier;

      enumTypeSpecifier : TypeSpecifier = enumSpecifier;
      typedefTypeSpecifier : TypeSpecifier = typedefName;
      atomicTypeSpecifier : TypeSpecifier = "_Atomic"s '('s typeName ')'s;


      typeSpecifier : TypeSpecifier  =
                              builtInTypeSpecifier      /
                              atomicTypeSpecifier       /
                              structOrUnionTypeSpecifier /
                              enumTypeSpecifier         /
                              typedefTypeSpecifier;
      
      typeDeclarationSpecifier : DeclarationSpecifier = typeSpecifier;
      
      forwardDeclarationStructOrUnionSpecifier : StructOrUnionSpecifier = structOrUnion identifier;
      declarationStructOrUnionSpecifier        : StructOrUnionSpecifier = structOrUnion identifier? '{'s structDeclarationList '}'s;
      structOrUnionSpecifier                   : StructOrUnionSpecifier = declarationStructOrUnionSpecifier / 
                                                                          forwardDeclarationStructOrUnionSpecifier;
      
      structOrUnion : StructOrUnion   = ("struct" / "union")S;
      
      structDeclarationList : list[StructDeclaration] = structDeclaration+;
      
      normalStructDeclaration : StructDeclaration = specifierQualifierList structDeclaratorList? ';'s;
            
      structDeclaration  : StructDeclaration = normalStructDeclaration /
                                               staticAssertStructDeclaration;

      declarationSpecifierBuiltInTypeSpecifier : DeclarationSpecifier = builtInTypeSpecifier;
      declarationSpecifierQualifier : DeclarationSpecifier = typeQualifier;
      
      declarationSpecifierBuiltInTypeSpecifierList : list[DeclarationSpecifier] = (declarationSpecifierQualifier / declarationSpecifierBuiltInTypeSpecifier)+;

      declarationSpecifierTypeSpecifierList : list[DeclarationSpecifier]  = typeSpecifier;

      
      specifierQualifierList : list[DeclarationSpecifier] = declarationSpecifierQualifier* (declarationSpecifierBuiltInTypeSpecifierList / declarationSpecifierTypeSpecifierList) declarationSpecifierQualifier*;

      structDeclaratorList   : list[StructDeclarator] = structDeclarator (','s structDeclarator)*;
      
      normalStructDeclarator : StructDeclarator = declarator;
      bitFieldStructDeclarator : StructDeclarator = declarator? ':'s constantExpression;

      structDeclarator       : StructDeclarator = normalStructDeclarator / bitFieldStructDeclarator;

      normalEnumSpecifier : EnumSpecifier = "enum"S identifier? '{'s enumeratorList '}'s;
      enumSpecifierWithComma : EnumSpecifier = "enum"S identifier? '{'s enumeratorList ','s '}'s;
      forwardDeclarationEnumSpecififer : EnumSpecifier = "enum"S identifier;
                               
      enumSpecifier : EnumSpecifier 
                                   =   normalEnumSpecifier /
                                       enumSpecifierWithComma /
                                       forwardDeclarationEnumSpecififer;
      
      enumeratorList : list[Enumerator] = enumerator (','s enumerator)*;
      
      normalEnumerator              : Enumerator = enumerationConstant;
      enumeratorWithExplicitValue   : Enumerator = enumerationConstant '='s constantExpression;
      enumerator                    : Enumerator = normalEnumerator / enumeratorWithExplicitValue;
     
      typeQualifier : TypeQualifier 
                                      = ("const"    / 
                                        "restrict" /
                                        "volatile" /
                                        "_Atomic")S;

      typeQualifeierDeclarationSpecifier    : DeclarationSpecifier  = typeQualifier;
      functionSpecifier                     : FunctionSpecifier     = "inline" / "_Noreturn";
      functionDeclarationSpecifier          : DeclarationSpecifier  = functionSpecifier;

      expressionAlignmentSpecifier          : AlignmentSpecifier = '('s constantExpression ')'s;
      alignAsAlignmentSpecifier             : AlignmentSpecifier = '('s typeName ')'s;
      alignmentSpecifier                    : AlignmentSpecifier =  "_Alignas"s (alignAsAlignmentSpecifier / expressionAlignmentSpecifier);
      alignmentDeclarationSpecifier         : DeclarationSpecifier = alignmentSpecifier;
      
      declarator : Declarator   = pointer? directDeclarator;
      
      simpleDirectDeclaratorHead : DirectDeclaratorHead = identifier;
      recurrentDirectDeclaratorHead  : DirectDeclaratorHead = '('s declarator ')'s;
      
      directDeclaratorHead : DirectDeclaratorHead = simpleDirectDeclaratorHead / recurrentDirectDeclaratorHead;

      assignmentExpressionDirectDeclaratorTailElement : DirectDeclaratorTailElement         = '['s  typeQualifierList? assignmentExpression? ']'s;
      static1AssignmentExpressionDirectDeclaratorTailElement : DirectDeclaratorTailElement  = '['s "static"s typeQualifierList? assignmentExpression ']'s;
      static2AssignmentExpressionDirectDeclaratorTailElement : DirectDeclaratorTailElement  = '['s typeQualifierList "static"s assignmentExpression ']'s;
      asterikDirectDeclaratorTailElement : DirectDeclaratorTailElement                      = '['s typeQualifierList? '*'s ']'s;
      functionWithParametersDirectDeclaratorTailElement : DirectDeclaratorTailElement       = '('s parameterTypeList ')'s;
      functionWithIdentifiersDirectDeclaratorTailElement : DirectDeclaratorTailElement      = '('s identifierList? ')'s; 

      directDeclaratorTailElement : DirectDeclaratorTailElement = 
        assignmentExpressionDirectDeclaratorTailElement         /
        static1AssignmentExpressionDirectDeclaratorTailElement  /
        static2AssignmentExpressionDirectDeclaratorTailElement  /
        asterikDirectDeclaratorTailElement                      /   
        functionWithParametersDirectDeclaratorTailElement       /
        functionWithIdentifiersDirectDeclaratorTailElement;
        
      directDeclarator : DirectDeclarator = directDeclaratorHead directDeclaratorTailElement*;
      
      normalPointer         : Pointer = '*'s typeQualifierList?;
      recurrentPointer      : Pointer = '*'s typeQualifierList? pointer;

      pointer : Pointer = recurrentPointer / normalPointer;
                
      typeQualifierList : list[TypeQualifier] = typeQualifier+;
      
      parameterTypeList                 : list[ParameterDeclaration] * bool =  parameterList (','s "..."s)?;
      parameterList                     : list[ParameterDeclaration] =  parameterDeclaration (','s parameterDeclaration)*;
      
      normalParameterDeclaration        : ParameterDeclaration = declarationSpecifiers declarator;
      abstractParameterDeclaration      : ParameterDeclaration = declarationSpecifiers abstractDeclarator?;
      parameterDeclaration              : ParameterDeclaration = normalParameterDeclaration / abstractParameterDeclaration;
      
      identifierList : list[Identifier] = identifier (','s identifier)*;
      
      typeName  : TypeName     = specifierQualifierList abstractDeclarator?;
 
      singularPointerAbstractDeclarator : AbstractDeclarator = pointer;
      normalAbstractDeclarator : AbstractDeclarator = pointer? directAbstractDeclarator;
      
      abstractDeclarator : AbstractDeclarator = singularPointerAbstractDeclarator / normalAbstractDeclarator;

      
      directAbstractDeclaratorTailElement : DirectAbstractDeclaratorTailElement = 
        assignmentExpressionDirectAbstractDeclaratorTailElement         /
        static1AssignmentExpressionDirectAbstractDeclaratorTailElement  /
        static2AssignmentExpressionDirectAbstractDeclaratorTailElement  /
        asterikDirectAbstractDeclaratorTailElement                      /
        functionWithParametersDirectAbstractDeclaratorTailElement;
      
      assignmentExpressionDirectAbstractDeclaratorTailElement        : DirectAbstractDeclaratorTailElement = '['s typeQualifierList? assignmentExpression? ']'s;
      static1AssignmentExpressionDirectAbstractDeclaratorTailElement : DirectAbstractDeclaratorTailElement = '['s "static"s typeQualifierList? assignmentExpression ']'s;
      static2AssignmentExpressionDirectAbstractDeclaratorTailElement : DirectAbstractDeclaratorTailElement = '['s typeQualifierList "static"s assignmentExpression ']'s;
      asterikDirectAbstractDeclaratorTailElement                     : DirectAbstractDeclaratorTailElement = '['s '*'s ']'s;
      functionWithParametersDirectAbstractDeclaratorTailElement      : DirectAbstractDeclaratorTailElement = '('s parameterTypeList? ')'s;

      normalDirectAbstractDeclarator    : DirectAbstractDeclarator = '('s abstractDeclarator ')' directAbstractDeclaratorTailElement*;
      singularDirectAbstractDeclarator  : DirectAbstractDeclarator = directAbstractDeclaratorTailElement+;
      directAbstractDeclarator          : DirectAbstractDeclarator = normalDirectAbstractDeclarator/singularDirectAbstractDeclarator;  
                       
      typedefName    : Identifier = identifier;
      
      assignmentExpressionInitializer   : Initializer = assignmentExpression;
      initializerListInitializer        : Initializer = '{'s initializerList '}'s;
      colonTermiatedInitializerListInitializer : Initializer = '{'s initializerList ','s '}'s;

      initializer : Initializer  = assignmentExpressionInitializer / 
                                   initializerListInitializer      /
                                   colonTermiatedInitializerListInitializer;
      
      initializerListElement        : InitializerListElement        = designation? initializer;
      initializerList               : list[InitializerListElement]  = initializerListElement (','s initializerListElement)*;
                        
      designation                   : list[Designator] = designatorList '='s;
      
      designatorList                : List[Designator] = designator+;
      
      constantExpressionDesignator  : Designator = '['s constantExpression ']'s;
      identifierDesignator          : Designator = '.'s identifier;

      designator                    : Designator = constantExpressionDesignator / identifierDesignator;
                    
      staticAssertStructDeclaration : StructDeclaration = staticAssertDeclaration;
      staticAssertDeclaration       : Declaration       = "_Static_assert"s '('s constantExpression ','s stringLiteral ')'s;
      
      #endregion
      
      #region A.2.3 Statements
      
      statement = labeledStatement    /
                  compoundStatement   /
                  expressionStatement /
                  selectionStatement  /
                  iterationStatement  /
                  jumpStatement;
                  
      labeledStatement = identifier ':'s statement                 /
                         "case"s constantExpression ':'s statement /
                         "default"s ':'s statement;
                         
      compoundStatement = '{'s blockItemList? '}'s;
      
      blockItemList     = blockItem+;
      blockItem         = declaration /
                          statement;
                          
      expressionStatement = expression? ';'s;
      
      selectionStatement  = "if"s '('s expression ')'s statement ("else"s statement)? /
                            "switch"s '('s expression ')'s statement;
                            
      iterationStatement  = "while"s '('s expression ')'s statement                                  /
                            "do"s statement "while"s '('s expression ')'s ';'s                       /
                            "for"s '('s expression? ';'s expression? ';'s expression? ')'s statement /
                            "for"s '('s declaration expression? ';'s expression? ')'s statement;
                            
      jumpStatement     = "goto"S identifier ';'s /
                          "continue"s ';'s        /
                          "break"s ';'s           /
                          "return"s expression? ';'s;

      #endregion
      
      #region A.2.4 External definitions
      
      translationUnit           : TranslationUnit = externalDeclaration+;
                        
      externalDeclaration       : ExternalDeclaration = functionDefinition / externalDeclarationDeclaration;
      
      externalDeclarationDeclaration : ExternalDeclaration = declaration;

      functionDefinition        : ExternalDeclaration = declarationSpecifiers declarator declarationList? compoundStatement;
      
      declarationList = declaration+;
      
      #endregion
  })]
  public partial class DeclarationsParser
  {
     // speciﬁer-qualiﬁer-list abstract-declaratoropt
     typeName(declarationSpecifiers : list[DeclarationSpecifier], abstractDeclarator : option[AbstractDeclarator]) : TypeName
     {
        TypeName(declarationSpecifiers, abstractDeclarator)
     }
  }
}
