using Nemerle;
using Nemerle.Collections;
using Nemerle.Peg;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Pinvoke.CParser.Ast.Constants;
using Nemerle.Pinvoke.CParser.Ast.Identifiers;

namespace Nemerle.Pinvoke.CParser
{
  public partial class DeclarationsParser
  {
    integerConstant(constant : Constant, _suffix : NToken) : Constant
    {
        constant
    }
    
    decimalConstant(head : NToken, tail : NToken) : Constant
    {
        def value = ulong.Parse(GetText(head) + GetText(tail));
        Constant.Integer(value)
    }

    hexadecimalConstant(_hexPrefix : NToken, tail : NToken) : Constant
    {
        Constant.Integer(Convert.ToUInt64(GetText(tail), 16));
    }

    octalConstant(_octalPrefix : NToken, tail : NToken) : Constant
    {
        Constant.Integer(Convert.ToUInt64(GetText(tail), 8));
    }

    characterConstant(_ : NToken, _ : NToken, _ : NToken) : Constant
    {
        throw NotImplementedException()
    }

    decimalFloatingConstant(_ : NToken, _ : NToken, _ : NToken, _ : NToken, _ : NToken, _ : NToken) : Constant
    {
        throw NotImplementedException()
    }

    enumerationConstant(_ : Identifier) : Constant
    {
        throw NotImplementedException()
    }

    hexadecimalFloatingConstant(_ : NToken, _ : NToken, _ : NToken, _ : NToken) : Constant
    {
        throw NotImplementedException()
    }
  }
}
