using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System.Collections.Generic;
using System.Linq;

using Nemerle.Pinvoke.CParser.Ast.ExternalDefinitions;
using Nemerle.Pinvoke.CParser.Ast.Declarations;
using Nemerle.Pinvoke.CParser.Ast.Declarations.Declarator;
using Nemerle.Pinvoke.CParser.Ast.Declarations.DeclarationSpecifiers;

using Nemerle.Pinvoke.CParser.ReflectionTree;

using NotImplementedException = System.NotImplementedException;
using NotSupportedException = System.NotSupportedException;

namespace Nemerle.Pinvoke.CParser
{
  public module TreeConverter
  {
    public Convert(translationUnit : TranslationUnit) : list[TopLevelEntry]
    {
        translationUnit.ExternalDeclarations.Map(x =>
            match(x)
            {
                | ExternalDeclaration.Declaration as declaration => CreateTopLevelEntry(declaration.Value)
                | _  => throw NotImplementedException()
            }).Flatten()
    }
    
    CreateTopLevelEntry(declaration : Declaration) : list[TopLevelEntry]
    {
        def normalDeclaration = 
            match(declaration)
            {
                | Declaration.Normal as value => value
                | _  => throw NotImplementedException()
            }

        match(normalDeclaration.DeclarationSpecifiers)
        {
            | DeclarationSpecifier.StorageClass as value :: tail 
                => match(value.Value)
                    {
                        | StorageClassSpecifier.Typedef => CreateTypedefEntry(tail, normalDeclaration.InitDeclarationList);
                        | _ => throw NotImplementedException()
                    }
            | _ => throw NotImplementedException()
        }
    }

    CreateTypedefEntry(declarationSpecifiers : list[DeclarationSpecifier], initDeclarators : list[InitDeclarator]) :  list[TopLevelEntry]
    {
        def typeDeclaration = CreateTypeDeclaration(declarationSpecifiers);

        def aliases = 
        initDeclarators.Map(
            initDeclarator =>
                {
                    match(initDeclarator)
                    {
                    | InitDeclarator(declarator, None) => NormalizePointers(typeDeclaration, ParseDeclarator(declarator))
                    | _ => throw NotSupportedException()
                    }
                }) 
        .Map(TypedefAlias);

        def newTypeDeclarations = if(typeDeclaration is Type.Struct || typeDeclaration is Type.Union)  [TopLevelEntry.Type(typeDeclaration)] else [];
        
        TopLevelEntry.Typedef(aliases) :: newTypeDeclarations;
    }

    ParseDeclarator(declarator : Declarator) : string * option[Pointer]
    {
        match (declarator)
        {
            | Declarator(None, _ as directDeclarator) 
                    => match(directDeclarator.Head)
                    {
                        | DirectDeclaratorHead.Simple as simpleDeclarator => (simpleDeclarator.Name.Id, None())
                        | _ => throw NotSupportedException(declarator.ToString())
                    }
            | Declarator(Some(pointer), _ as directDeclarator) 
                => match(directDeclarator.Head)
                {
                    | DirectDeclaratorHead.Recurrent(innerDeclarator) => 
                                                
                            match(ParseDeclarator(innerDeclarator))
                            {
                                | (name, None()) => (name, Some(pointer))
                                | _ => throw NotSupportedException()
                            }
                                                
                    | DirectDeclaratorHead.Simple as simpleDeclarator => (simpleDeclarator.Name.Id, Some(pointer))
                }
        }
    }

    NormalizePointers(typeDeclaration : ReflectionTree.Type, declarator : string * option[Pointer]) : string * ReflectionTree.Type
    {
        match(declarator)
        {
            | (name, None) => (name, typeDeclaration)
            | (name, Some(pointer)) => NormalizePointers(Type.Pointer(typeDeclaration), (name, pointer.InnerPointer))
        }
    }
    
    CreateStructOrUnionTypeDeclaration(specifier : StructOrUnionSpecifier) : Type
    {
        match(specifier)
        {
            | StructOrUnionSpecifier.Declaration as value => 
                {
                    def members = value.declarations.Map(d => 
                        {
                            def typeDeclaration =  CreateTypeDeclaration(d.DeclarationSpecifierList);
                            
                            match(d.StructDeclaratorsList)
                            {
                                | [structDeclarator] =>     
                                    match(structDeclarator)
                                    {
                                        | StructDeclarator.NormalDeclarator as normalDeclarator =>
                                            {
                                                def normalized = NormalizePointers(typeDeclaration, ParseDeclarator(normalDeclarator.value));
                                                ReflectionTree.Field(normalized)
                                            }
                                        | _ => throw NotSupportedException()
                                    }
                            }
                            
                    });

                    def optionalName = value.Name.Map(i => i.Id);
                    
                    match(value.StructOrUnion)
                    {
                        | StructOrUnion.Struct => Type.Struct(optionalName, members)
                        | StructOrUnion.Union  => Type.Union(optionalName, members)
                    }
                }
            | _ => throw NotImplementedException()
        }
    }

    CreateTypeDeclaration(declarationSpecifiers : list[DeclarationSpecifier]) : Type
    {
        match(declarationSpecifiers.OfType.[DeclarationSpecifier.TypeSpecifier]().Map(x => x.Value))
        {
        | [typeSpecifier] => 
            match(typeSpecifier)
            {
            | TypeSpecifier.StructOrUnion as value => CreateStructOrUnionTypeDeclaration(value.Specifier)
            | TypeSpecifier.TypedefName as value => Type.Typedef(value.Name)
            | Void      => Type.BuiltIn(BuiltInType.Void())
            | Char      => Type.BuiltIn(BuiltInType.Char())
            | Short     => Type.BuiltIn(BuiltInType.Short())
            | Int       => Type.BuiltIn(BuiltInType.Int())
            | Long      => Type.BuiltIn(BuiltInType.Long())
            | Float     => Type.BuiltIn(BuiltInType.Float())
            | Double    => Type.BuiltIn(BuiltInType.Double())
            | Signed    => Type.BuiltIn(BuiltInType.Int())
            | Unsigned  => Type.BuiltIn(BuiltInType.UnsignedInt())
            | Bool      => Type.BuiltIn(BuiltInType.Bool())
            | Complex   => Type.BuiltIn(BuiltInType.Complex())
            }
        | typeSpecifierList =>
            {
                def builtInType = 
                    match(typeSpecifierList)
                    {
                    | [TypeSpecifier.Signed() ,           TypeSpecifier.Char()]                                                             =>  BuiltInType.SignedChar();
                    | [TypeSpecifier.Unsigned() ,         TypeSpecifier.Char()]                                                             =>  BuiltInType.UnsignedChar();
                    | [TypeSpecifier.Signed() ,           TypeSpecifier.Short()]                                                            =>  BuiltInType.Short();
                    | [TypeSpecifier.Short() ,            TypeSpecifier.Int()]                                                              =>  BuiltInType.Short();
                    | [TypeSpecifier.Signed(),            TypeSpecifier.Short(),          TypeSpecifier.Int()]                              =>  BuiltInType.Short();
                    | [TypeSpecifier.Unsigned(),          TypeSpecifier.Short()]                                                            =>  BuiltInType.UnsignedShort();
                    | [TypeSpecifier.Unsigned(),          TypeSpecifier.Short(),          TypeSpecifier.Int() ]                             =>  BuiltInType.UnsignedShort();
                    | [TypeSpecifier.Signed(),            TypeSpecifier.Int()]                                                              =>  BuiltInType.Int();
                    | [TypeSpecifier.Unsigned(),          TypeSpecifier.Int()]                                                              =>  BuiltInType.UnsignedInt();
                    | [TypeSpecifier.Signed(),            TypeSpecifier.Long()]                                                             =>  BuiltInType.Long();
                    | [TypeSpecifier.Long(),              TypeSpecifier.Int()]                                                              =>  BuiltInType.Long();
                    | [TypeSpecifier.Signed(),            TypeSpecifier.Long(),           TypeSpecifier.Int() ]                             =>  BuiltInType.Long();
                    | [TypeSpecifier.Unsigned(),          TypeSpecifier.Long()]                                                             =>  BuiltInType.UnsignedLong();
                    | [TypeSpecifier.Unsigned(),          TypeSpecifier.Long(),           TypeSpecifier.Int() ]                             =>  BuiltInType.UnsignedLong();
                    | [TypeSpecifier.Long(),              TypeSpecifier.Long()]                                                             =>  BuiltInType.LongLong();
                    | [TypeSpecifier.Signed(),            TypeSpecifier.Long(),           TypeSpecifier.Long()]                             =>  BuiltInType.LongLong();
                    | [TypeSpecifier.Long(),              TypeSpecifier.Long(),           TypeSpecifier.Int() ]                             =>  BuiltInType.LongLong();
                    | [TypeSpecifier.Signed(),            TypeSpecifier.Long(),           TypeSpecifier.Long(),       TypeSpecifier.Int() ] =>  BuiltInType.LongLong();
                    | [TypeSpecifier.Unsigned(),          TypeSpecifier.Long(),           TypeSpecifier.Long(),]                            =>  BuiltInType.UnsignedLongLong();
                    | [TypeSpecifier.Unsigned(),          TypeSpecifier.Long(),           TypeSpecifier.Long(),       TypeSpecifier.Int() ] =>  BuiltInType.UnsignedLongLong();
                    | [TypeSpecifier.Long(),              TypeSpecifier.Double()]                                                           =>  BuiltInType.LongDouble();
                    | [TypeSpecifier.Float(),             TypeSpecifier.Complex()]                                                          =>  BuiltInType.FloatComplex();
                    | [TypeSpecifier.Double(),            TypeSpecifier.Complex()]                                                          =>  BuiltInType.DoubleComplex();
                    | [TypeSpecifier.Long(),              TypeSpecifier.Double(),         TypeSpecifier.Complex(),]                         =>  BuiltInType.LongDoubleComplex();
                    | _ => throw NotSupportedException()
                    };

                Type.BuiltIn(builtInType)
            }
        }
    }
  }
}
