using Nemerle;
using Nemerle.Collections;
using Nemerle.ComputationExpressions;
using Nemerle.Text;
using Nemerle.Utility;

using System.Collections.Generic;
using System.Linq;

using Nemerle.Pinvoke.CParser.Ast.Declarations;
using Nemerle.Pinvoke.CParser.Ast.Declarations.Declarator;
using Nemerle.Pinvoke.CParser.Ast.Declarations.DeclarationSpecifiers;
using Nemerle.Pinvoke.CParser.Ast.ExternalDefinitions;
using Nemerle.Pinvoke.CParser.Ast.Expressions;

using Nemerle.Pinvoke.CParser.ReflectionTree;

using NotImplementedException = System.NotImplementedException;
using NotSupportedException = System.NotSupportedException;

namespace Nemerle.Pinvoke.CParser
{
  public module TreeConverter
  {

  
    type Acc[T] = Nemerle.Pinvoke.CParser.AccumulatorBuilder[TopLevelEntry].Accumulator[T];
    type acc = Nemerle.Pinvoke.CParser.AccumulatorBuilder[TopLevelEntry];


    public Convert(translationUnit : TranslationUnit) : list[TopLevelEntry]
    {
        translationUnit.ExternalDeclarations.Map(x =>
            match(x)
            {
                | ExternalDeclaration.Declaration as declaration => CreateTopLevelEntry(declaration.Value)
                | _  => throw NotImplementedException()
            }).Flatten()
    }
    
    CreateTopLevelEntry(declaration : Declaration) : list[TopLevelEntry]
    {
        def normalDeclaration = 
            match(declaration)
            {
                | Declaration.Normal as value => value
                | _  => throw NotImplementedException()
            }

        match(normalDeclaration.DeclarationSpecifiers)
        {
            | DeclarationSpecifier.StorageClass as value :: tail 
                => match(value.Value)
                    {
                        | StorageClassSpecifier.Typedef => CreateTypedefEntry(tail, normalDeclaration.InitDeclarationList);
                        | _ => throw NotImplementedException()
                    }
            | _ => throw NotImplementedException()
        }
    }

    CreateTypedefEntry(declarationSpecifiers : list[DeclarationSpecifier], initDeclarators : list[InitDeclarator]) :  list[TopLevelEntry]
    {
        def typeDeclaration = CreateType(declarationSpecifiers).value;

        def aliases = 
        initDeclarators.Map(
            initDeclarator =>
                {
                    match(initDeclarator)
                    {
                    | InitDeclarator(declarator, None) => NormalizePointers(typeDeclaration, ParseDeclarator(declarator))
                    | _ => throw NotSupportedException()
                    }
                }) 
        .Map(TypedefAlias);

        def newTypeDeclarations = if(typeDeclaration is Type.Struct || typeDeclaration is Type.Union)  [TopLevelEntry.Type(typeDeclaration)] else [];
        
        TopLevelEntry.Typedef(aliases) :: newTypeDeclarations;
    }

    ParseDeclarator(declarator : Declarator) : string * option[Pointer]
    {
        match (declarator)
        {
            | Declarator(None, _ as directDeclarator) 
                    => match(directDeclarator.Head)
                    {
                        | DirectDeclaratorHead.Simple as simpleDeclarator => (simpleDeclarator.Name.Id, None())
                        | _ => throw NotSupportedException(declarator.ToString())
                    }
            | Declarator(Some(pointer), _ as directDeclarator) 
                => match(directDeclarator.Head)
                {
                    | DirectDeclaratorHead.Recurrent(innerDeclarator) => 
                                                
                            match(ParseDeclarator(innerDeclarator))
                            {
                                | (name, None()) => (name, Some(pointer))
                                | _ => throw NotSupportedException()
                            }
                                                
                    | DirectDeclaratorHead.Simple as simpleDeclarator => (simpleDeclarator.Name.Id, Some(pointer))
                }
        }
    }

    NormalizePointers(typeDeclaration : ReflectionTree.Type, declarator : string * option[Pointer]) : string * ReflectionTree.Type
    {
        match(declarator)
        {
            | (name, None) => (name, typeDeclaration)
            | (name, Some(pointer)) => NormalizePointers(Type.Pointer(typeDeclaration), (name, pointer.InnerPointer))
        }
    }
    
    CreateStructOrUnionTypeDeclaration(specifier : StructOrUnionSpecifier) : Acc[Type]
    {
        comp acc()
        {
        match(specifier)
        {
            | StructOrUnionSpecifier.Declaration as value => 
                {
                    def members = value.declarations.Map(CreateFields);
                    
                    def tops = members.Map(m => m.accumulator).Flatten();
                    def fields = members.Map(m => m.value).Flatten();

                    
                    defcomp fields_ = Acc(fields, tops);
                    //defcomp r = Acc(tops, field)
                                      
                    
                    def optionalName = value.Name.Map(i => i.Id);
                    match(value.StructOrUnion)
                    {
                        | StructOrUnion.Struct => return Type.Struct(optionalName, fields_)
                        | StructOrUnion.Union  => return Type.Union(optionalName, fields_)
                    }
                }
            | _ => throw NotImplementedException()
        }}
    }

    GetExpressionValue(_ : AssignmentExpression) : int
    {
        5
    }

    CreateFields(structDeclaration : StructDeclaration) : Acc[list[Member]]
    {
        def typeDeclaration =  CreateType(structDeclaration.DeclarationSpecifierList);
        
        def GetType(pointer : option[Pointer], directDeclaratorTail : list[DirectDeclaratorTailElement]) : Type
        {
            | (_optionalPointer, (AssignmentExpression(_typeQualifiers, Some(a))) :: tail)  => Type.Array(GetExpressionValue(a), GetType(pointer, tail))
            | (Some(p),          declaratorTail)                                            => Type.Pointer(GetType(p.InnerPointer, declaratorTail))
            | (None,             [])                                                        => typeDeclaration.value
            | _                                                                             => throw NotSupportedException()
        }

        def CreateField(structDeclarator : StructDeclarator) : Member
        {
            | StructDeclarator.NormalDeclarator(Declarator(_, DirectDeclarator(DirectDeclaratorHead.Simple(name), _))) as normalDeclarator=>
                {
                    def pointer = normalDeclarator.Value.Pointer;
                    def directDeclaratorTail = normalDeclarator.Value.DirectDeclarator.Tail;
                    
                    Member.Field(name.Id, GetType(pointer, directDeclaratorTail))
                }
            | _ => throw NotSupportedException()
        }

        
        comp acc()
        {
            match((structDeclaration.StructDeclaratorsList, typeDeclaration.value))
            {
                | ([],  Type.Union(None, fields))   => return [Member.UnnamedUnion(fields)]
                | ([],  Type.Struct(None, fields))  => return [Member.UnnamedStruct(fields)]
                | (_,   _                       )   => return structDeclaration.StructDeclaratorsList.Map(CreateField)
            }
        }
    }

    CreateType(declarationSpecifiers : list[DeclarationSpecifier]) : Acc[Type]
    {
        def typeSpecifiers = declarationSpecifiers.OfType.[DeclarationSpecifier.TypeSpecifier]().Map(x => x.Value);
        def CreateBuiltInType(typeSpecifier)
        {
            | TypeSpecifier.Void      => Type.BuiltIn(BuiltInType.Void())
            | TypeSpecifier.Char      => Type.BuiltIn(BuiltInType.Char())
            | TypeSpecifier.Short     => Type.BuiltIn(BuiltInType.Short())
            | TypeSpecifier.Int       => Type.BuiltIn(BuiltInType.Int())
            | TypeSpecifier.Long      => Type.BuiltIn(BuiltInType.Long())
            | TypeSpecifier.Float     => Type.BuiltIn(BuiltInType.Float())
            | TypeSpecifier.Double    => Type.BuiltIn(BuiltInType.Double())
            | TypeSpecifier.Signed    => Type.BuiltIn(BuiltInType.Int())
            | TypeSpecifier.Unsigned  => Type.BuiltIn(BuiltInType.UnsignedInt())
            | TypeSpecifier.Bool      => Type.BuiltIn(BuiltInType.Bool())
            | TypeSpecifier.Complex   => Type.BuiltIn(BuiltInType.Complex())
        }

        def CreateMultiTokenBuiltInType(typeSepcifierList)
        {
            | [TypeSpecifier.Signed() ,           TypeSpecifier.Char()]                                                             =>  BuiltInType.SignedChar();
            | [TypeSpecifier.Unsigned() ,         TypeSpecifier.Char()]                                                             =>  BuiltInType.UnsignedChar();
            | [TypeSpecifier.Signed() ,           TypeSpecifier.Short()]                                                            =>  BuiltInType.Short();
            | [TypeSpecifier.Short() ,            TypeSpecifier.Int()]                                                              =>  BuiltInType.Short();
            | [TypeSpecifier.Signed(),            TypeSpecifier.Short(),          TypeSpecifier.Int()]                              =>  BuiltInType.Short();
            | [TypeSpecifier.Unsigned(),          TypeSpecifier.Short()]                                                            =>  BuiltInType.UnsignedShort();
            | [TypeSpecifier.Unsigned(),          TypeSpecifier.Short(),          TypeSpecifier.Int() ]                             =>  BuiltInType.UnsignedShort();
            | [TypeSpecifier.Signed(),            TypeSpecifier.Int()]                                                              =>  BuiltInType.Int();
            | [TypeSpecifier.Unsigned(),          TypeSpecifier.Int()]                                                              =>  BuiltInType.UnsignedInt();
            | [TypeSpecifier.Signed(),            TypeSpecifier.Long()]                                                             =>  BuiltInType.Long();
            | [TypeSpecifier.Long(),              TypeSpecifier.Int()]                                                              =>  BuiltInType.Long();
            | [TypeSpecifier.Signed(),            TypeSpecifier.Long(),           TypeSpecifier.Int() ]                             =>  BuiltInType.Long();
            | [TypeSpecifier.Unsigned(),          TypeSpecifier.Long()]                                                             =>  BuiltInType.UnsignedLong();
            | [TypeSpecifier.Unsigned(),          TypeSpecifier.Long(),           TypeSpecifier.Int() ]                             =>  BuiltInType.UnsignedLong();
            | [TypeSpecifier.Long(),              TypeSpecifier.Long()]                                                             =>  BuiltInType.LongLong();
            | [TypeSpecifier.Signed(),            TypeSpecifier.Long(),           TypeSpecifier.Long()]                             =>  BuiltInType.LongLong();
            | [TypeSpecifier.Long(),              TypeSpecifier.Long(),           TypeSpecifier.Int() ]                             =>  BuiltInType.LongLong();
            | [TypeSpecifier.Signed(),            TypeSpecifier.Long(),           TypeSpecifier.Long(),       TypeSpecifier.Int() ] =>  BuiltInType.LongLong();
            | [TypeSpecifier.Unsigned(),          TypeSpecifier.Long(),           TypeSpecifier.Long(),]                            =>  BuiltInType.UnsignedLongLong();
            | [TypeSpecifier.Unsigned(),          TypeSpecifier.Long(),           TypeSpecifier.Long(),       TypeSpecifier.Int() ] =>  BuiltInType.UnsignedLongLong();
            | [TypeSpecifier.Long(),              TypeSpecifier.Double()]                                                           =>  BuiltInType.LongDouble();
            | [TypeSpecifier.Float(),             TypeSpecifier.Complex()]                                                          =>  BuiltInType.FloatComplex();
            | [TypeSpecifier.Double(),            TypeSpecifier.Complex()]                                                          =>  BuiltInType.DoubleComplex();
            | [TypeSpecifier.Long(),              TypeSpecifier.Double(),         TypeSpecifier.Complex(),]                         =>  BuiltInType.LongDoubleComplex();
            | _ => throw NotSupportedException()
        }
        
        comp acc()
        {
            match(typeSpecifiers)
            {
                | [TypeSpecifier.StructOrUnion as value]    => returncomp CreateStructOrUnionTypeDeclaration(value.Specifier)
                | [TypeSpecifier.TypedefName as value]      => return Type.Typedef(value.Name)
                | [typeSpecifier]                           => return CreateBuiltInType(typeSpecifier)
                | typeSpecifierList                         => return Type.BuiltIn(CreateMultiTokenBuiltInType(typeSpecifierList))
            }
        }
    }
  }
}
