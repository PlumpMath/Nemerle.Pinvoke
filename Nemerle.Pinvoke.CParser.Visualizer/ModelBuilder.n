using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Pinvoke.CParser;
using Nemerle.Pinvoke.CParser.Visualizer.Macros;
using Nemerle.Pinvoke.CParser.Visualizer.Model;

namespace Nemerle.Pinvoke.CParser.Visualizer
{
    internal module ModelBuilder
    {
        internal CreateRoot(source : string) : IEnumerable[GrammarNode] * option[int * IEnumerable[string]]
        {
            def parser = DeclarationsParser();
            def (pos, root) = parser.TryParse(source);
            def (rollbackPos, ruleNames) = parser.GetMaxRollbackPosAndNames();

            if(pos != source.Length)
            {
                ([], Some((rollbackPos, ruleNames)))
            }
            else
            {
                (BuildGrammarNode(root), None())
            }
        }
    }
}
