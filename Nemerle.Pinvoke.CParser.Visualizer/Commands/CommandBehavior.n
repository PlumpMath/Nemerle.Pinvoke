using System.Reflection;
using System.Windows;
using System.Windows.Input;

using Nemerle.Assertions;
using Nemerle.WPF;

namespace Nemerle.Pinvoke.CParser.Visualizer.Commands
{
    public module CommandBehavior : DependencyObject
    {
        [DependencyProperty(IsAttached, Metadata=PropertyMetadata(default(ICommand)))]
        public static GetCommand(element : DependencyObject) : ICommand;			
			
		[DependencyProperty(IsAttached, Metadata=PropertyMetadata(default(object)))]
		public static GetCommandParameter( element : DependencyObject) : object;
				
		[DependencyProperty(IsAttached, Metadata=FrameworkPropertyMetadata(string.Empty, OnEventNameChanged))]
		public static GetEventName(element : DependencyObject) : string;

        private OnEventNameChanged(d : DependencyObject, e : DependencyPropertyChangedEventArgs) : void
        {
            def routedEvent = e.NewValue :> string;

            when (!string.IsNullOrEmpty(routedEvent))
            {
                def eventInfo = d.GetType().GetEvent(routedEvent, BindingFlags.Public | BindingFlags.Instance);

                when (eventInfo != null)
                    eventInfo.AddEventHandler(d, EventHooker().GetNewEventHandlerToRunCommand(eventInfo));
            }
        }
    }
}
