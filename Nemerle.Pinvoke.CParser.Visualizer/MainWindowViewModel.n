using System;
using System.IO;
using System.IO.Path;
using System.IO.File;
using System.Collections.Generic;
using System.Xml;
using System.Linq;
using System.Xml.Linq;
using System.Reactive.Linq;
using System.Windows;
using System.Windows.Data;
using System.Windows.Input;
using System.Reflection.Assembly;
using System.Collections.ObjectModel;

using Nemerle.Extensions;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Linq;
using Nemerle.Xml;

using Nemerle.Pinvoke.CParser.Visualizer.Commands;
using Nemerle.Pinvoke.CParser.Visualizer.Macros;
using Nemerle.Pinvoke.CParser.Visualizer.Model;

namespace Nemerle.Pinvoke.CParser.Visualizer
{
    [ImplementsNotifyPropertyChanged]
    public class MainWindowViewModel
    {
        public this()
        {
            def xmlDocument = XmlDocument();
            xmlDocument.Load <| 
                CreateFileSystemXmlTree(Combine(GetExecutingAssembly().Location |> GetDirectoryName, "Gallery")).CreateReader();
            
            GalleryData = XmlDataProvider() <- Document = xmlDocument;

            SetHighlighting = RelayCommand.[GrammarNode](grammarNode => 
                                                        { 
                                                            HighlightingStart  = grammarNode?.Location[0];
                                                            HighlightingLength = grammarNode?.Location[1] - HighlightingStart; 
                                                        });

            OpenGalleryItem = RelayCommand.[XmlAttribute](pathAttribute => { Source = ReadAllText(pathAttribute.Value) });

            def filteredInput = _parseSource.
                                Throttle(TimeSpan.FromMilliseconds(500));

            _ = filteredInput.
                            SelectMany(_ => Observable.
                            ToAsync(AstVisualModelBuilder().CreateRoot)(Source).
                            Catch(e => { SetError(e); Observable.Empty() }).
                            TakeUntil(filteredInput)).
                            Subscribe((root, parseErrors) => 
                                    match(parseErrors)
                                    {
                                       | Some((rollbackPos, ruleNames)) => SetError(rollbackPos, ruleNames)
                                       | _ => AstTreeRoot = root; ShouldShowError = false;
                                    });
                                    
           _ = filteredInput.
                            SelectMany(_ => Observable.
                            ToAsync(ReflectionTreeVisualModelBuilder().CreateRoot)(Source).
                            Catch(e => { SetError(e); Observable.Empty() }).
                            TakeUntil(filteredInput)).
                            Subscribe((root, _) => ReflectionTreeRoot = root);
        }

        public GalleryData : XmlDataProvider { get; private set; }

        public AstTreeRoot : IEnumerable[GrammarNode] { get; private set; }
        
        public ReflectionTreeRoot : IEnumerable[GrammarNode] { get; private set; }

        public Source    : string { get; set; }

        private mutable _shouldShowError  : bool;
        public ShouldShowError  : bool   
        { 
            get 
            { 
                _shouldShowError 
            }
            private set 
            { 
                _shouldShowError = value; 
                ShouldShowModel = !value; 
            }
        }

        public ShouldShowModel  : bool   { get; private set; }

        public ErrorText : string { get; private set; }

        public HighlightingStart  : int { get; set; }

        public HighlightingLength : int { get; set; }

        public OpenGalleryItem : ICommand { get; private set; }

        public SetHighlighting : ICommand { get; private set; }

        public ParseSource     : ICommand { get { _parseSource; } }
        
        private SetError(exception : Exception) : void
        {
            SetError(exception.ToString());
        }
        
        private SetError(rollbackPos : int, ruleNames : IEnumerable[string]) : void
        {
            def errorText = $"Parse error at $rollbackPos." + 
                            if (ruleNames.Any()) 
                                $<#Expected rule(s): $(Environment.NewLine)..$(ruleNames;"\n")#> 
                            else
                                string.Empty;
            
            SetError(errorText);
        }
        
        private SetError(errorText : string) : void
        {
            ErrorText       = errorText; 
            ShouldShowError = true;
        }

        static CreateFileSystemXmlTree (path : string) : XElement
        {
            def directoryInfo = DirectoryInfo(path);

            def dirs = Directory.GetDirectories(path).Select(CreateFileSystemXmlTree); 
            
            def files = directoryInfo.GetFiles().Select(file => xml <# <File Path = $(file.FullName) Name = $(file.Name)/> #>);
            
            xml <#
            <Directory Name = $(directoryInfo.Name)>
                    $dirs
                    $files
            </Directory> #>
        }

        private _parseSource = ObservableCommand.[string]();
    }
}
