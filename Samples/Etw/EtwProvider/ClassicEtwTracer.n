using Nemerle;
using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace EtwProvider
{
  
  public module ClassicEtwTracer
  {
    public ControlCallback(requestCode : uint, requestContext : ClassicTraceContext, bufferSize : IntPtr, buffer : IntPtr) : uint
    {
        def newSessionHandle = Functions.GetTraceLoggerHandle(buffer);

        // WMI_ENABLE_EVENTS = 4
        // WMI_DISABLE_EVENTS  = 5
        requestContext.IsEnabled =
        match((requestCode, requestContext.Session))
        {
            | (4u, 0 : ulong) => 
                {
                    requestContext.Session = newSessionHandle;
                    true
                }
            | (4u, n) when n == newSessionHandle => true
            | (5u, n) when n == newSessionHandle =>
                {
                    requestContext.Session = 0;
                    false
                }
        }

        0u
    }   
    
    public RegisterProvider(providerGuid : Guid, context : ClassicTraceContext) : TraceHandle
    {
        def eventGuids = array[TRACE_GUID_REGISTRATION() <- { Guid = providerGuid; RegHandle = IntPtr.Zero; }];
        
        mutable traceHandle;
        def result = Functions.RegisterTraceGuids(ControlCallback, context, providerGuid,  1, eventGuids, IntPtr.Zero, IntPtr.Zero, out traceHandle);

        TraceHandle(traceHandle)
    }
  }
}
