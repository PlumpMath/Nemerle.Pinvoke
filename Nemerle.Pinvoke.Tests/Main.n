using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;

using Nemerle.Surround;

using Nemerle.Pinvoke.CParser;
using Nemerle.Pinvoke.Tests.Macros;

namespace Nemerle.Pinvoke.Tests
{
    module Program
    {
        RunTest(test : TestCase) : bool
        {
            def showErrorPos(errorPos)
            {
                def errorLocation = test.Source.GetSourceLine(errorPos);
                def col = errorPos - errorLocation.StartPos + 1;
                WriteLine(errorLocation.GetText().TrimEnd(array['\r', '\n', '\u2028', '\u2029']));
                surroundwith(Yellow)
                {
                    Write(string('-', col - 1));
                    WriteLine('^'); // error pointer
                }
                WriteLine();
            }

            mutable testIsPassed = true;

            def parser = DeclarationsParser();
            match(parser.Parse(test.Source))
            {
                | Some(decl) =>

                    unless(test.ValidateAst(decl))
                    {
                        surroundwith(Red)
                            WriteLine($"AST validation failed for `$(test.FileName)'");

                        testIsPassed = false;
                    }

                | _ =>
                    def (errorPos, _) = parser.GetMaxRollbackPosAndIds();
                    surroundwith(Red)
                        WriteLine($"Failed to parse file `$(test.FileName)'");
                    showErrorPos(errorPos);

                    testIsPassed = false;
            }
            
            testIsPassed
        }

        Main() : int
        {
            mutable totalTests = 0;
            mutable totalFailed = 0;

            foreach(test in GetTestCases("positive\\*.c"))
            {
                unless(RunTest(test))
                    totalFailed += 1;
                totalTests += 1;
            }

            if(totalFailed == 0)
            {
                surroundwith(Green)
                    WriteLine($"All $totalTests tests passed.");
                0
            }
            else
            {
                surroundwith(Red)
                    WriteLine($"$totalFailed tests of $totalTests failed.");
                -1
            }
        }
    }
}