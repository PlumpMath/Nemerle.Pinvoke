using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;
using Nemerle.Extensions;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;

using Nemerle.Pinvoke.CParser;
using Nemerle.Pinvoke.CParser.ReflectionTree;

namespace Nemerle.Pinvoke.Macros
{
  module CodeGenerator
  {
    delegate TryGetFunc[T1, TResult](arg1 : T1 , value : out TResult ) : bool;
    
    FromTryGet[U, T](f : TryGetFunc[U,T], u : U) : option[T] 
    {
        mutable t : T;
        if(f(u, out t)) Some(t) else None()
    }

    public Generate(reflectionTree : list[TopLevelEntry], typer : Typer, annotations : Dictionary[string, TypeAnnotation])  : void
    {

        def aliases = reflectionTree
            .OfType.[TopLevelEntry.Typedef]()
            .SelectMany(typedef => typedef.Aliases)
            .ToDictionary(alias => alias.Name, alias => alias.Type);

        Console.WriteLine($"..$aliases");

        def GetSize = CodeGenerator.GetSize(_, name => aliases[name]);

        def GenerateField(field , offset : int)
        {
            def name = field.Name;
                       
            def typeReference = GetReferenceName(field.Type);
            def typeReferenceName = typeReference.ToString();

            def annotation = FromTryGet(annotations.TryGetValue, typeReferenceName);
            // if (annotations.ContainsKey(typeReferenceName)) Some(annotations[typeReferenceName]) else None();
            
            def type = 
                match(annotation)
                {
                    | Some(TypeAnnotation(Some(typeOverride), _))   => typeOverride
                    | _                                             => typeReference
                }
            
            def classMember = <[ decl: public mutable $(name : dyn) : $(type);]>;

            match(field.Type)
            {
                | Type.Array as arr => classMember.AddCustomAttribute(<[MarshalAs(UnmanagedType.ByValArray, SizeConst = $(arr.Size))]>);
                | _                 => {}
            }

            classMember.AddCustomAttribute(<[FieldOffset($offset)]>);

            foreach(attribute in annotation.Map(ann => ann.Attributes).WithDefault([]))
            {
                classMember.AddCustomAttribute(attribute);
            }


            classMember
        }

        
        def GenerateStructOrUnion(type, name, members) : list[ClassMember.TypeDeclaration]
        {
            def GenFields(memberList : list[Member], offset : int)
            {
                def result = 
                match(type, memberList)
                {
                | (Type.Struct, Member.Field as head :: tail)         => GenerateField(head, offset):: GenFields(tail, offset + GetSize(head))
                | (Type.Union,  Member.Field as head :: tail)         => GenerateField(head, offset):: GenFields(tail, offset);
                | (_,           Member.UnnamedStruct as head :: tail) => GenFields(head.Members, offset) + GenFields(tail, offset + GetSize(head));
                | (_,           Member.UnnamedUnion as head :: tail)  =>   
                    {
                        def unionFields = head.Members;
                        def resultFields = unionFields.Map(field => GenFields([field], offset)).Flatten();

                        resultFields + GenFields(tail, offset + GetSize(head))
                    }
                | _ => []
                };

                result
            }

            def fields = (members, 0) |> GenFields;
                    
            def structure = <[decl: public struct $(name : usesite)  { ..$fields }]>;
            
            structure.AddCustomAttribute(<[StructLayout(LayoutKind.Explicit)]>);

            [structure]
        }

        def GenerateAlias(typedef)
        {
           def typeExpr = GetReferenceName(typedef.Type);
           def typedefNameSliceable = Splicable.Name(<[$(typedef.Name : usesite)]>);
        
           def topDeclaration = TopDeclaration.Alias(typedefNameSliceable,  
                AttributesAndModifiers(NemerleModifiers.Public, []), Typarms.Empty, typeExpr);

           ClassMember.TypeDeclaration(typedefNameSliceable, topDeclaration);
        }

        def GenerateType(type)
        {
            | Type.Struct(name, members) 
            | Type.Union(name, members) => GenerateStructOrUnion(type, name.WithDefault(GenerateNameForUnnamed(type).Id), members) 
            | Type.BuiltIn 
            | Type.Typedef 
            | Type.Pointer  => []
        } 
        
        def GenerateTopLevelEntry(entry)
        {
            | TopLevelEntry.Typedef as typedef  => typedef.Aliases.Map(GenerateAlias)
            | TopLevelEntry.Type as type        => GenerateType(type.Value)
            | TopLevelEntry.Function            => []
        }   

        foreach(builder in reflectionTree.Map(GenerateTopLevelEntry).Flatten().Map(typer.Env.Define))
            builder.Compile();
    }


    GetSizeForType(t : ReflectionTree.Type, GetRealType : string -> ReflectionTree.Type) : int
    {
        match(t)
        {
        | Type.BuiltIn as value => 
            {
                def (_, size) = GetBuiltInTypeInfo(value.Type);
                size
            }
        | Type.Struct  as value => value.Members.Map(GetSize(_, GetRealType)).Sum()
        | Type.Union   as value => value.Members.Map(GetSize(_, GetRealType)).Max()
        | Type.Typedef as value => GetSizeForType(GetRealType(value.Name), GetRealType)
        | Type.Array   as value => GetSizeForType(value.ElementType, GetRealType) * value.Size
        | Type.Pointer          => IntPtr.Size
        };
    }

    [Memoize]
    private GetSize(field : ReflectionTree.Member, GetRealType : string -> ReflectionTree.Type) : int
    {
        match(field)
        {
            | Member.Field as       f   => GetSizeForType(f.Type, GetRealType)
            | Member.UnnamedUnion as u  => u.Members.Map(GetSize(_, GetRealType)).Max()
            | Member.UnnamedStruct as s => s.Members.Map(GetSize(_, GetRealType)).Sum()
        }
    }    
       
    private GetReferenceName(type : ReflectionTree.Type) : PExpr
    {
        | Type.Struct as value    => value.Name.Map(n => <[$(n : dyn)]>).WithDefault(<[$(GenerateNameForUnnamed(type) : name)]>)
        | Type.Union  as value    => value.Name.Map(n => <[$(n : dyn)]>).WithDefault(<[$(GenerateNameForUnnamed(type) : name)]>)
        | Type.BuiltIn as value   => GetBuiltInTypeInfo(value.Type)[0]
        | Type.Typedef as value   => <[ $(value.Name : dyn)]>
        | Type.Pointer as value   => GetReferenceName(value.Pointee)
        | Type.Array as value     => <[array[$(GetReferenceName(value.ElementType))]]>
    }
  
    private GetBuiltInTypeInfo(b: BuiltInType) : PExpr * int
    {
        | BuiltInType.Char
        | BuiltInType.SignedChar
        | BuiltInType.UnsignedChar           => (<[byte  ]>, 1)
        | BuiltInType.Short                  => (<[short ]>, 2)
        | BuiltInType.UnsignedShort          => (<[ushort]>, 2)
        | BuiltInType.Int                    => (<[int   ]>, 4)
        | BuiltInType.UnsignedInt            => (<[uint  ]>, 4)
        | BuiltInType.Long                   => (<[int   ]>, 4)
        | BuiltInType.UnsignedLong           => (<[uint  ]>, 4)
        | BuiltInType.LongLong               => (<[long  ]>, 8)
        | BuiltInType.UnsignedLongLong       => (<[ulong ]>, 8)
        | BuiltInType.Float                  => (<[float ]>, 4)
        | BuiltInType.Double                 => (<[double]>, 8)
        | BuiltInType.Bool                   => (<[bool  ]>, 1)
        | BuiltInType.LongDouble             => (<[double]>, 8)
        | BuiltInType.Void                   => (<[IntPtr]>, 4)
        | BuiltInType.LongDoubleComplex
        | BuiltInType.Complex
        | BuiltInType.FloatComplex
        | BuiltInType.DoubleComplex
        | _                                  => throw NotSupportedException()        
    }
        
    [Memoize]
    GenerateNameForUnnamed(type : ReflectionTree.Type) : Parsetree.Name
    {
        Macros.NewSymbol("unnamed");
    }
  }
}
