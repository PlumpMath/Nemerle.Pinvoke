using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

using Nemerle.Pinvoke.CParser;

namespace Nemerle.Pinvoke.Macros
{
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Assembly)]
  macro Include(files : string, params options : list[PExpr])
  {
    
    def manager = Macros.Manager();
    def projectDir = Path.GetDirectoryName(manager.Options.ProjectPath);
    
    def parseExternals(externalsList)
    {
        def parse(pExpr)
        {
            | <[$alias = $type]> =>  (alias.ToString(), type.ToString())
        }

        externalsList.Map(p => parse(p))
    }

    mutable externals;

    foreach(item in options)
    {
        | <[ Externals = [..$externalsList]]> => externals = parseExternals(externalsList)
        | _ => Message.Error("err")
    }
       
    foreach(fileName in Directory.GetFiles(projectDir, files))
    {
        NativeStructImpl.DoTransform(Macros.ImplicitCTX(), fileName, string.Concat(File.ReadAllLines(fileName)), externals )
    }
  }
  
  module NativeStructImpl
  {
    public DoTransform(typer : Typer, name : string, content : string, externals : list.[string * string]) : void
    {
      Macros.DefineCTX(typer);

      def parser = DeclarationsParser();

      assert2(false);
      
      def str = parser.Parse(content);

      
      
      def value = str.Map(s => s.ToString()).WithDefault("");




      def builder = typer.Env.Define(
        <[
            decl:
            public class Test
            {
                public override ToString() : string
                {
                    $value
                }
            }
        ]>);
        
      builder.Compile();

      /*def topLevelMemberDescriptors = parser.Parse(content).Value;

      def MapTypeName(originalName)
      {
                topLevelMemberDescriptors
                    .Where(s => s.HaveAlias(originalName))
                    .Select(s => PrettyPrint(s.BestAlias()))
                    .FirstOrDefault()
            ??  externals
                    .Where(s => s[0] == originalName)
                    .Select(s => s[1]).FirstOrDefault()
            ??  TypeMapping.ConvertType(originalName);
      }

      foreach(descriptor in topLevelMemberDescriptors)
      {
        descriptor.Generate(typer, MapTypeName);
      }*/
    }
  }
}
