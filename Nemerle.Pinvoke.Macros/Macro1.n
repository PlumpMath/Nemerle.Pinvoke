using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;

using Nemerle.Pinvoke.CParser;
using Nemerle.Pinvoke.CParser.ReflectionTree;

namespace Nemerle.Pinvoke.Macros
{
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Assembly)]
  macro Include(files : string, params options : list[PExpr])
  {
    
    def manager = Macros.Manager();
    def projectDir = Path.GetDirectoryName(manager.Options.ProjectPath);
    
    def parseExternals(externalsList)
    {
        def parse(pExpr)
        {
            | <[$alias = $type]> =>  (alias.ToString(), type.ToString())
        }

        externalsList.Map(p => parse(p))
    }

    mutable externals;

    foreach(item in options)
    {
        | <[ Externals = [..$externalsList]]> => externals = parseExternals(externalsList)
        | _ => Message.Error("err")
    }
       
    foreach(fileName in Directory.GetFiles(projectDir, files))
    {
        NativeStructImpl.DoTransform(Macros.ImplicitCTX(), fileName, string.Concat(File.ReadAllLines(fileName)), externals )
    }
  }
  
  module NativeStructImpl
  {
    public DoTransform(typer : Typer, _name : string, content : string, _externals : list.[string * string]) : void
    {
      Macros.DefineCTX(typer);

      def parser = DeclarationsParser();
      
      unless (Nemerle.Macros.ImplicitCTX().Manager.IsIntelliSenseMode)
      {
          _ = Debugger.Launch();
      }
      

      def str = parser.Parse(content);
      
      def reflectionTree = str.Map(CParser.TreeConverter.Convert);

      def value = str.Map(s => s.ToString()).WithDefault("");

      def builder = typer.Env.Define(
        <[
            decl:
            public class Test
            {
                public override ToString() : string
                {
                    $value
                }
            }
        ]>);
        
      builder.Compile();

      foreach(entry in reflectionTree.WithDefault([]))
      {
        Generate(entry).Map(e => typer.Env.Define(e)).Iter(builder => builder.Compile());
      }

    }

    private Generate(entry : TopLevelEntry) : list[ClassMember.TypeDeclaration]
    {
        | TopLevelEntry.Typedef as typedef  => Generate(typedef.Aliases)
        | TopLevelEntry.Type as type        => Generate(type.Value)
        | TopLevelEntry.Function            => []
    }

    private Generate(type : ReflectionTree.Type) : list[ClassMember.TypeDeclaration]
    {
        | Type.Struct   as value    => [GenereateStruct(value)] 
        | Type.Union   
        | Type.BuiltIn 
        | Type.Typedef 
        | Type.Pointer  => []
    }

    private GenereateStruct(structType : Type.Struct) : ClassMember.TypeDeclaration
    {
        
        def name = structType.Name.Value;
        def members = Generate(structType.Members);
        <[decl: struct $(name : dyn) { ..$members }]>
    }

    private Generate(fields : list[Field]) : list[ClassMember]
    {
        def convert(field : Field)
        {
            def name = field.Name;
            def type = GetReferenceName(field.Type);
            match(field.Type)
            {
                | Type.Array => <[ decl: public mutable $(name : dyn) : array[$(type : dyn)];]>
                | _          => <[ decl: public mutable $(name : dyn) : $(type : dyn);]>
            }
        }
        
        fields.Map(f => convert(f))
    }
    
    private Generate(aliases : list[TypedefAlias]) : list[ClassMember.TypeDeclaration]
    {
        def convert(typedef : TypedefAlias)
        {
            def typeExpr = <[$(GetReferenceName(typedef.Type) : usesite)]>;
            def typedefNameSliceable = Splicable.Name(<[$(typedef.Name : usesite)]>);
        
            def topDeclaration = TopDeclaration.Alias(typedefNameSliceable,  AttributesAndModifiers(), Typarms.Empty, typeExpr);
            ClassMember.TypeDeclaration(typedefNameSliceable, topDeclaration);
        }
        
        aliases.Map(a => convert(a))
    }
    
    private GetReferenceName(type : ReflectionTree.Type) : string
    {
        | Type.Struct as value    => value.Name.WithDefault(GenerateNameForUnnamed())
        | Type.Union  as value    => value.Name.WithDefault(GenerateNameForUnnamed())
        | Type.BuiltIn as value   => 
            match(value.Type)
            {               
            | BuiltInType.LongLong => "ulong"
            | BuiltInType.Short    => "int"
            | _                    => "int"
            }
        | Type.Typedef as value   => value.Name
        | Type.Pointer as value   => GetReferenceName(value.Pointee)
        | Type.Array as value     => GetReferenceName(value.ElementType);//$"array[$(GetReferenceName(value.ElementType))]";//
    }
  
    GenerateNameForUnnamed() : string
    {
        "unnamed"
    }
}
}
