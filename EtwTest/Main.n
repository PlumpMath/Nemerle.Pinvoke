using Nemerle.Collections;
using Nemerle.Extensions;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Console;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

using EtwProvider;
using EtwProvider.Functions;
using EtwProvider.EtwTracer;

module Program
{

  public class Context
  {}

  Main() : void
  {
    mutable handle : TraceHandle;

    //def etwProc : EtwProc = (requestCode : uint, requestContext : IntPtr, bufferSize : IntPtr, buffer : IntPtr) => {0u};
    def etwProc : EtwProc = ControlCallback;
    def context = ClassicTraceContext();
    mutable providerGuid = Guid("{C7319460-4E61-4E59-8CE1-621C9CBA384F}");
    
    def eventGuids = array[TRACE_GUID_REGISTRATION() <- { Guid = providerGuid; RegHandle = IntPtr.Zero; }];

    mutable regHandle;
    def result = RegisterTraceGuids(etwProc, context, ref providerGuid,  1, eventGuids, IntPtr.Zero, IntPtr.Zero, out regHandle);
    
    Console.WriteLine(result);
    Console.WriteLine(regHandle);


    _ = Task.Factory.StartNew(Action(() 
        =>{
            foreach(i in $[0..10000])
            {
                Console.WriteLine(i);
                Thread.Sleep(1000)
                
            }
          }));
       


    _ = Console.ReadKey();
    def result2 =  UnregisterTraceGuids(regHandle);
    Console.WriteLine(result2);
    //Console.WriteLine(regHandle.DangerousGetHandle());
    //regHandle.Dispose();
  }
}